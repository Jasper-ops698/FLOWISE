"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalMomentoLocalMiddlewareRequestHandler = exports.ExperimentalMomentoLocalTestConfigMiddleware = void 0;
const momento_error_code_metadata_converter_1 = require("../retry/momento-error-code-metadata-converter");
const momento_rpc_method_1 = require("../retry/momento-rpc-method");
class ExperimentalMomentoLocalMiddlewareRequestHandler {
    constructor(metadata) {
        this.metadata = metadata;
    }
    onRequestBody(request) {
        return Promise.resolve(request);
    }
    onRequestMetadata(metadata) {
        const grpcMetadata = metadata._grpcMetadata;
        for (const [key, value] of Object.entries(this.metadata)) {
            this.setGrpcMetadata(grpcMetadata, key, value);
        }
        return Promise.resolve(metadata);
    }
    onResponseMetadata(metadata) {
        return Promise.resolve(metadata);
    }
    onResponseBody(response) {
        return Promise.resolve(response);
    }
    onResponseStatus(status) {
        return Promise.resolve(status);
    }
    setGrpcMetadata(metadata, key, value) {
        if (value === undefined)
            return;
        let convertedKey;
        let convertedValue;
        switch (key) {
            case 'requestId':
                convertedKey = 'request-id';
                convertedValue = value;
                break;
            case 'returnError':
                convertedKey = 'return-error';
                convertedValue = momento_error_code_metadata_converter_1.MomentoErrorCodeMetadataConverter.convert(value);
                break;
            case 'errorRpcs':
                convertedKey = 'error-rpcs';
                convertedValue = value
                    .map(rpcMethod => momento_rpc_method_1.MomentoRPCMethodMetadataConverter.convert(rpcMethod))
                    .join(' ');
                break;
            case 'errorCount':
                convertedKey = 'error-count';
                convertedValue = value.toString();
                break;
            case 'delayRpcs':
                convertedKey = 'delay-rpcs';
                convertedValue = value
                    .map(rpcMethod => momento_rpc_method_1.MomentoRPCMethodMetadataConverter.convert(rpcMethod))
                    .join(' ');
                break;
            case 'delayMs':
                convertedKey = 'delay-ms';
                convertedValue = value.toString();
                break;
            case 'delayCount':
                convertedKey = 'delay-count';
                convertedValue = value.toString();
                break;
            default:
                convertedKey = key;
                convertedValue = value;
        }
        metadata.set(convertedKey, convertedValue);
    }
}
exports.ExperimentalMomentoLocalMiddlewareRequestHandler = ExperimentalMomentoLocalMiddlewareRequestHandler;
class ExperimentalMomentoLocalTestConfigMiddleware {
    constructor(metadata) {
        this.shouldLoadLate = true;
        this.metadata = metadata;
    }
    onNewRequest() {
        return new ExperimentalMomentoLocalMiddlewareRequestHandler(this.metadata);
    }
}
exports.ExperimentalMomentoLocalTestConfigMiddleware = ExperimentalMomentoLocalTestConfigMiddleware;
//# sourceMappingURL=data:application/json;base64,